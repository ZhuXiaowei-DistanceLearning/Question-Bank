<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>
    <modules>
        <module>message-queue</module>
        <module>design-pattern</module>
        <module>netty-reactive</module>
        <module>web</module>
        <module>algorithm</module>
        <module>distribute-lock</module>
        <module>cache</module>
        <module>transaction</module>
        <module>unit-test</module>
        <module>fx-ui</module>
        <module>infrastructure</module>
        <module>application</module>
        <module>domain</module>
        <module>crawler</module>
        <module>auth</module>
    </modules>
<!--    <parent>-->
<!--        <groupId>org.springframework.boot</groupId>-->
<!--        <artifactId>spring-boot-starter-parent</artifactId>-->
<!--        <version>2.4.6.RELEASE</version>-->
<!--        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
<!--    </parent>-->
    <groupId>com.zxw</groupId>
    <artifactId>question-bank</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>question-bank</name>
    <description>my question-bank practice</description>

    <properties>
        <java.version>11</java.version>
        <powermock.version>2.0.9</powermock.version>
        <spring-boot.version>2.7.0</spring-boot.version>
        <spring.cloud-version>2021.0.3</spring.cloud-version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--        <dependency>-->
<!--            <groupId>org.springframework.cloud</groupId>-->
<!--            <artifactId>spring-cloud-dependencies</artifactId>-->
<!--            <version>2020.0.4</version>-->
<!--            &lt;!&ndash;            <type>pom</type>&ndash;&gt;-->
<!--            &lt;!&ndash;            <scope>runtime</scope>&ndash;&gt;-->
<!--        </dependency>-->
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
                <version>2021.1</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-bom</artifactId>
                <version>2020.0.7</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

<!--    <build>-->
<!--        <finalName>question-bank</finalName>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.0.0</version>-->
<!--                <configuration>-->
<!--                    <dockerDirectory>src/main/docker</dockerDirectory>-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <artifactId>maven-antrun-plugin</artifactId>-->
<!--                &lt;!&ndash;绑定mvn package命令，当执行package这个maven命令打包项目的同时-->
<!--                    会把target目录下的jar包给copy到docker目录去&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>package</phase>-->
<!--                        <configuration>-->
<!--                            <tasks>-->
<!--                                <copy todir="src/main/docker"-->
<!--                                      file="target/${project.build.finalName}.${project.packaging}"></copy>-->
<!--                            </tasks>-->
<!--                        </configuration>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--            <plugin>-->
<!--                <groupId>com.github.shalousun</groupId>-->
<!--                <artifactId>smart-doc-maven-plugin</artifactId>-->
<!--                <version>2.1.0</version>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成文档的使用的配置文件,配置文件放在自己的项目中&ndash;&gt;-->
<!--                    <configFile>web/src/main/java/resources/smart-doc.json</configFile>-->
<!--                    &lt;!&ndash;指定项目名称&ndash;&gt;-->
<!--                    <projectName>测试</projectName>-->
<!--                    &lt;!&ndash;smart-doc实现自动分析依赖树加载第三方依赖的源码，如果一些框架依赖库加载不到导致报错，这时请使用excludes排除掉&ndash;&gt;-->
<!--                    <excludes>-->
<!--                        &lt;!&ndash;格式为：groupId:artifactId;参考如下&ndash;&gt;-->
<!--                        &lt;!&ndash;1.0.7版本开始你还可以用正则匹配排除,如：poi.* &ndash;&gt;-->
<!--                        <exclude>com.alibaba:fastjson</exclude>-->
<!--                    </excludes>-->
<!--                    &lt;!&ndash;自1.0.8版本开始，插件提供includes支持&ndash;&gt;-->
<!--                    &lt;!&ndash;smart-doc能自动分析依赖树加载所有依赖源码，原则上会影响文档构建效率，因此你可以使用includes来让插件加载你配置的组件&ndash;&gt;-->
<!--                    <includes>-->
<!--                        &lt;!&ndash;格式为：groupId:artifactId;参考如下&ndash;&gt;-->
<!--                        <include>com.alibaba:fastjson</include>-->
<!--                    </includes>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash;如果不需要在执行编译时启动smart-doc，则将phase注释掉&ndash;&gt;-->
<!--                        <phase>compile</phase>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash;smart-doc提供了html、openapi、markdown等goal，可按需配置&ndash;&gt;-->
<!--                            <goal>html</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--        </plugins>-->
<!--    </build>-->

    <profiles>
        <profile>
            <id>jdk11</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <jdk>${java.version}</jdk>
            </activation>
            <properties>
                <maven.compiler.source>${java.version}</maven.compiler.source>
                <maven.compiler.target>${java.version}</maven.compiler.target>
                <maven.compiler.compilerVersion>${java.version}</maven.compiler.compilerVersion>
            </properties>
        </profile>
        <profile>
            <id>sonar</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <sonar.jdbc.url>
                    jdbc:postgresql://127.0.0.1/sonarqube
                </sonar.jdbc.url>
                <sonar.jdbc.username>postgres</sonar.jdbc.username>
                <sonar.jdbc.password>123456</sonar.jdbc.password>
                <sonar.login>admin</sonar.login>
                <sonar.password>123456</sonar.password>
                <sonar.host.url>http://localhost:9000</sonar.host.url>
            </properties>

        </profile>
    </profiles>

</project>
